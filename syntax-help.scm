(define (syntax-read fn)
  (let ((p (open-input-file fn))
        (n 0))
    (let (exp)
      (set! exp (read p))
      (while (not (eof-object? exp))
             (set! n (inc n))
             (display n)
             (display ": ")
             (print exp)
             (set! exp (read p))))
    (close-port p)
    ))

(define (syntax-find <func> <fn>)
  (let ((p (open-input-file <fn>))
        entry)
    (let (exp)
      (set! exp (read p))
      (while (and (not entry) (not (eof-object? exp)))
             (if (eq? (caar exp) <func>)
                   (set! entry exp))
             (set! exp (read p)))
      (close-port p)
      entry)))

(define (help <func>)
  (let ((x (syntax-find <func> "syntax.scm")))
    (if x
        (begin
          (display (car x))
          (display " -> ")
          (display (caddr x))
          (newline))
        (begin
          (display "no help for ")
          (display <func>)
          (newline)))))

(define (grep^ pattern)
  (if (symbol? pattern)
      (set! pattern (symbol->string pattern)))
  (let ((pattern (string-append "^((" pattern)))
    (syntax-grep pattern)))

(define (grep pattern)
  (if (symbol? pattern)
      (set! pattern (symbol->string pattern)))
  (let ((cmd (string-append "grep \"" pattern "\" syntax.scm")))
    (print cmd)
    (system cmd)
    ))

(define (syntax-show)
  (syntax-read "syntax.scm"))

