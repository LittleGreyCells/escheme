(load "~/optimizer/nested.scm")
(load "/home/larry/optimizer/nested.scm")
(system "ls ~/optimizer")
(system "ls ~/Desktop/optimizer")
(load "/home/larry/Desktop/optimizer/nested.scm")
(normalize-define (quote (define (foo a b) (+ a b))))
(define (normalize-define d) (if opt-verbose (trace "normalize-define" d)) (if (not (and (pair? d) (eq? (car d) (quote define)))) (error "not a define" d) (if (eq? (car d) (quote define)) (let ((x (cadr d))) (if (symbol? x) d (if (not (pair? d)) (error "cannot normalze define" d) (let ((sym (car x)) (args (cdr x)) (body (cddr d))) (quasiquote (define (unquote sym) (lambda) (unquote args) (unquote body))))))))))
(normalize-define (quote (define (foo a b) (+ a b))))
(define (normalize-define d) (if opt-verbose (trace "normalize-define" d)) (if (not (and (pair? d) (eq? (car d) (quote define)))) (error "not a define" d) (if (eq? (car d) (quote define)) (let ((x (cadr d))) (if (symbol? x) d (if (not (pair? d)) (error "cannot normalze define" d) (let ((sym (car x)) (args (cdr x)) (body (cddr d))) (quasiquote (define (unquote sym) (lambda (unquote-splicing args) (unquote-splicing body)))))))))) (normalize-define (quote (define (foo a b) (+ a b)))) 1)
(define (normalize-define d) (if opt-verbose (trace "normalize-define" d)) (if (not (and (pair? d) (eq? (car d) (quote define)))) (error "not a define" d) (if (eq? (car d) (quote define)) (let ((x (cadr d))) (if (symbol? x) d (if (not (pair? d)) (error "cannot normalze define" d) (let ((sym (car x)) (args (cdr x)) (body (cddr d))) (quasiquote (define (unquote sym) (lambda (unquote-splicing args) (unquote-splicing body)))))))))))
(normalize-define (quote (define (foo a b) (+ a b))))
(define (normalize-define d) (if opt-verbose (trace "normalize-define" d)) (if (not (and (pair? d) (eq? (car d) (quote define)))) (error "not a define" d) (if (eq? (car d) (quote define)) (let ((x (cadr d))) (if (symbol? x) d (if (not (pair? d)) (error "cannot normalze define" d) (let ((sym (car x)) (args (cdr x)) (body (cddr d))) (quasiquote (define (unquote sym) (lambda (unquote args) (unquote-splicing body)))))))))))
(normalize-define (quote (define (foo a b) (+ a b))))
(eval (normalize-define (quote (define (foo a b) (+ a b)))))
(foo 1 2)
(transform-nested-defines (quote (define (foo a b) (define bar a) (define bob b) (+ bar bob))))
(eval (transform-nested-defines (quote (define (foo a b) (define bar a) (define bob b) (+ bar bob)))))
(foo 1 2)
(gc)
(load "./tests/escheme_test_suite.scm")
(perform-timed-run 1)
(perform-timed-run 100)
(perform-timed-run 1000)
(perform-timed-run 4000)
(load "./tests/escheme_test_suite2.scm")
(perform-timed-run 300)
(perform-timed-run 1000)
(load "./tests/gcs.scm")
(load "./tests/gcm.scm")
(load "./tests/gc.scm")
(gc-verbose)
